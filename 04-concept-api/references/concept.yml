methods:
  - method:
    common: &method-asRemote
      title: Get a Remote version of the concept.
      description: The remote version uses the given transaction to execute every method call.
      accepts:
        param:
          name: tx
          description: The transaction to be used to make method calls.
          type: Transaction
          required: true
          default: N/A
      returns:
        - "`Concept.Remote`"
    java:
      <<: *method-asRemote
      method: concept.asRemote(tx);
    javascript:
      <<: *method-asRemote
      method: concept.asRemote(tx);
    python:
      <<: *method-asRemote
      method: concept.as_remote(tx)
      returns:
        - "`RemoteConcept`"

  - method:
    common: &method-isType
      title: Check if concept is a Type (Local)
      returns:
        - boolean
    java:
      <<: *method-isType
      method: concept.isType();
    javascript:
      <<: *method-isType
      method: concept.isType();
    python:
      <<: *method-isType
      method: concept.is_type()

  - method:
    common: &method-isThing
      title: Check if concept is a Thing (Local)
      returns:
        - boolean
    java:
      <<: *method-isThing
      method: concept.isThing();
    javascript:
      <<: *method-isThing
      method: concept.isThing();
    python:
      <<: *method-isThing
      method: concept.is_thing()

  - method:
    common: &method-isEntityType
      title: Check if concept is an EntityType (Local)
      returns:
        - boolean
    java:
      <<: *method-isEntityType
      method: concept.isEntityType();
    javascript:
      <<: *method-isEntityType
      method: concept.isEntityType();
    python:
      <<: *method-isEntityType
      method: concept.is_entity_type()

  - method:
    common: &method-isAttributeType
      title: Check if concept is an AttributeType (Local)
      returns:
        - boolean
    java:
      <<: *method-isAttributeType
      method: concept.isAttributeType();
    javascript:
      <<: *method-isAttributeType
      method: concept.isAttributeType();
    python:
      <<: *method-isAttributeType
      method: concept.is_attribute_type()

  - method:
    common: &method-isRelationType
      title: Check if concept is a RelationType (Local)
      returns:
        - boolean
    java:
      <<: *method-isRelationType
      method: concept.isRelationType();
    javascript:
      <<: *method-isRelationType
      method: concept.isRelationType();
    python:
      <<: *method-isRelationType
      method: concept.is_relation_type()

  - method:
    common: &method-isRoleType
      title: Check if concept is a RoleType (Local)
      returns:
        - boolean
    java:
      <<: *method-isRoleType
      method: concept.isRoleType();
    javascript:
      <<: *method-isRoleType
      method: concept.isRoleType();
    python:
      <<: *method-isRoleType
      method: concept.is_role_type()

  - method:
    common: &method-isEntity
      title: Check if concept is an Entity (Local)
      returns:
        - boolean
    java:
      <<: *method-isEntity
      method: concept.isEntity();
    javascript:
      <<: *method-isEntity
      method: concept.isEntity();
    python:
      <<: *method-isEntity
      method: concept.is_entity()

  - method:
    common: &method-isAttribute
      title: Check if concept is an Attribute (Local)
      returns:
        - boolean
    java:
      <<: *method-isAttribute
      method: concept.isAttribute();
    javascript:
      <<: *method-isAttribute
      method: concept.isAttribute();
    python:
      <<: *method-isAttribute
      method: concept.is_attribute()

  - method:
    common: &method-isRelation
      title: Check if concept is a Relation (Local)
      returns:
        - boolean
    java:
      <<: *method-isRelation
      method: concept.isRelation();
    javascript:
      <<: *method-isRelation
      method: concept.isRelation();
    python:
      <<: *method-isRelation
      method: concept.is_relation()

  - method:
    common: &method-asType
      title: Cast the concept as Type (Local)
      description: Casts the concept as Type so that we can call the Type methods on it.
    java:
      <<: *method-asType
      method: concept.asType();
      returns:
        - "[`Type`](../concept-api/type?tab=java#type-methods)"
    javascript:
      <<: *method-asType
      method: concept.asType();
      returns:
        - "[`Type`](../concept-api/type?tab=javascript#type-methods)"
    python:
      <<: *method-asType
      method: concept.as_type();
      returns:
        - "[`Type`](../concept-api/type?tab=python#type-methods)"

  - method:
    common: &method-asThing
      title: Cast the concept as Thing (Local)
      description: Casts the concept as Thing so that we can call the Thing methods on it.
    java:
      <<: *method-asThing
      method: concept.asThing();
      returns:
        - "[`Thing`](../concept-api/thing?tab=java#thing-methods)"
    javascript:
      <<: *method-asThing
      method: concept.asThing();
      returns:
        - "[`Thing`](../concept-api/thing?tab=javascript#thing-methods)"
    python:
      <<: *method-asThing
      method: concept.as_thing();
      returns:
        - "[`Thing`](../concept-api/thing?tab=python#thing-methods)"

  - method:
    common: &method-asEntityType
      title: Cast the concept as EntityType (Local)
      description: Casts the concept as EntityType so that we can call the EntityType methods on it.
    java:
      <<: *method-asEntityType
      method: concept.asEntityType();
      returns:
        - "[`EntityType`](../concept-api/type?tab=java#entitytype-methods)"
    javascript:
      <<: *method-asEntityType
      method: concept.asEntityType();
      returns:
        - "[`EntityType`](../concept-api/type?tab=javascript#entitytype-methods)"
    python:
      <<: *method-asEntityType
      method: concept.as_entity_type();
      returns:
        - "[`EntityType`](../concept-api/type?tab=python#entitytype-methods)"

  - method:
    common: &method-asAttributeType
      title: Cast the concept as AttributeType (Local)
      description: Casts the concept as AttributeType so that we can call the AttributeType methods on it.
    java:
      <<: *method-asAttributeType
      method: concept.asAttributeType();
      returns:
        - "[`AttributeType`](../concept-api/type?tab=java#attributetype-methods)"
    javascript:
      <<: *method-asAttributeType
      method: concept.asAttributeType();
      returns:
        - "[`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)"
    python:
      <<: *method-asAttributeType
      method: concept.as_attribute_type();
      returns:
        - "[`AttributeType`](../concept-api/type?tab=python#attributetype-methods)"

  - method:
    common: &method-asRelationType
      title: Cast the concept as RelationType (Local)
      description: Casts the concept as RelationType so that we can call the RelationType methods on it.
    java:
      <<: *method-asRelationType
      method: concept.asRelationType();
      returns:
        - "[`RelationType`](../concept-api/type?tab=java#relationtype-methods)"
    javascript:
      <<: *method-asRelationType
      method: concept.asRelationType();
      returns:
        - "[`RelationType`](../concept-api/type?tab=javascript#relationtype-methods)"
    python:
      <<: *method-asRelationType
      method: concept.as_relation_type();
      returns:
        - "[`RelationType`](../concept-api/type?tab=python#relationtype-methods)"

  - method:
    common: &method-asRoleType
      title: Cast the concept as RoleType (Local)
      description: Casts the concept as RoleType so that we can call the RoleType methods on it.
    java:
      <<: *method-asRoleType
      method: concept.asRoleType();
      returns:
        - "[`RoleType`](../concept-api/type?tab=java#roletype-methods)"
    javascript:
      <<: *method-asRoleType
      method: concept.asRoleType();
      returns:
        - "[`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
    python:
      <<: *method-asRoleType
      method: concept.as_role_type();
      returns:
        - "[`RoleType`](../concept-api/type?tab=python#roletype-methods)"

  - method:
    common: &method-asEntity
      title: Cast the concept as Entity (Local)
      description: Casts the concept as Entity so that we can call the Entity methods on it.
    java:
      <<: *method-asEntity
      method: concept.asEntity();
      returns:
        - "[`Entity`](../concept-api/thing?tab=java#entity-methods)"
    javascript:
      <<: *method-asEntity
      method: concept.asEntity();
      returns:
        - "[`Entity`](../concept-api/thing?tab=javascript#entity-methods)"
    python:
      <<: *method-asEntity
      method: concept.as_entity();
      returns:
        - "[`Entity`](../concept-api/thing?tab=python#entity-methods)"

  - method:
    common: &method-asAttribute
      title: Cast the concept as Attribute (Local)
      description: Casts the concept as Attribute so that we can call the Attribute methods on it.
    java:
      <<: *method-asAttribute
      method: concept.asAttribute();
      returns:
        - "[`Attribute`](../concept-api/thing?tab=java#attribute-methods)"
    javascript:
      <<: *method-asAttribute
      method: concept.asAttribute();
      returns:
        - "[`Attribute`](../concept-api/thing?tab=javascript#attribute-methods)"
    python:
      <<: *method-asAttribute
      method: concept.as_attribute();
      returns:
        - "[`Attribute`](../concept-api/thing?tab=python#attribute-methods)"

  - method:
    common: &method-asRelation
      title: Cast the concept as Relation (Local)
      description: Casts the concept as Relation so that we can call the Relation methods on it.
    java:
      <<: *method-asRelation
      method: concept.asRelation();
      returns:
        - "[`Relation`](../concept-api/thing?tab=java#relation-methods)"
    javascript:
      <<: *method-asRelation
      method: concept.asRelation();
      returns:
        - "[`Relation`](../concept-api/thing?tab=javascript#relation-methods)"
    python:
      <<: *method-asRelation
      method: concept.as_relation();
      returns:
        - "[`Relation`](../concept-api/thing?tab=python#relation-methods)"

  - method:
    common: &method-delete
      title: Delete concept
      method: concept.asRemote(Transaction tx).delete();
      returns:
        - void
    java:
      <<: *method-delete
    javascript:
      <<: *method-delete
      method: await concept.asRemote(tx).delete();
    python:
      <<: *method-delete
      method: concept.as_remote(tx).delete()
      returns:
        - None
        
  - method:
    common: &method-isDeleted
      title: Check if the concept has been deleted
      returns:
        - boolean
    java:
      <<: *method-isDeleted
      method: concept.asRemote(Transaction tx).isDeleted()
    javascript:
      <<: *method-isDeleted
      method: await concept.asRemote(tx).isDeleted();
    python:
      <<: *method-isDeleted
      method: concept.as_remote(tx).is_deleted()

  - method:
    common: &method-toJSON
      title: Retrieve a concept as JSON.
      returns:
        - JSON
    java:
      <<: *method-toJSON
      method: concept.toJSON();
    javascript:
      <<: *method-toJSON
      method: await concept.toJSONRecord();
    python:
      <<: *method-toJSON
      method: concept.to_json()
