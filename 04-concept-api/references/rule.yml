methods:
  - method:
    common: &method-getLabel
      title: Retrieve label (Local)
      description: Retrieves the unique label of the rule.
      returns:
        - String
    java:
      <<: *method-getLabel
      method: rule.getLabel();
    javascript:
      <<: *method-getLabel
      method: rule.label;
    python:
      <<: *method-getLabel
      method: rule.get_label()

  - method:
    common: &method-asRemote
      title: Get a Remote version of the rule.
      description: The remote version uses the given transaction to execute every method call.
      accepts:
        param:
          name: tx
          description: The transaction to be used to make method calls.
          type: Transaction
          required: true
          default: N/A
      returns:
        - "`RemoteRule`"
    java:
      <<: *method-asRemote
      method: rule.asRemote(tx);
      returns:
        - "`Rule.Remote`"
    javascript:
      <<: *method-asRemote
      method: rule.asRemote(tx);
    python:
      <<: *method-asRemote
      method: rule.as_remote(tx)

  - method:
    common: &method-when
      title: Retrieve the when body (Local)
      description: Retrieves the statements that constructs the when body of the rule.
      returns:
        - string
    java:
      <<: *method-when
      method: rule.getWhen();
    javascript:
      <<: *method-when
      method: rule.when;
    python:
      <<: *method-when
      method: rule.get_when()

  - method:
    common: &method-then
      title: Retrieve the then body (Local)
      description: Retrieves the single statement that constructs the then body of the rule.
      returns:
        - string
    java:
      <<: *method-then
      method: rule.getThen();
    javascript:
      <<: *method-then
      method: rule.then;
    python:
      <<: *method-then
      method: rule.get_then()

  - method:
    common: &method-setLabel
      title: Rename label
      description: Renames the label of the rule. The new label must remain unqiue.
      accepts:
        param:
          name: label
          description: The new label to be given to the rule.
          type: String
          required: true
          default: N/A
    java:
      <<: *method-setLabel
      method: rule.asRemote(Transaction tx).setLabel(String label);
      returns:
        - void
    javascript:
      <<: *method-setLabel
      method: await rule.asRemote(tx).setLabel(label);
      returns:
        - void
    python:
      <<: *method-setLabel
      method: rule.as_remote(tx).set_label(label)
      returns:
        - None

  - method:
    common: &method-delete
      title: Delete rule
    java:
      <<: *method-delete
      method: rule.asRemote(Transaction tx).delete();
      returns:
        - "`null`"
    javascript:
      <<: *method-delete
      method: await rule.asRemote(tx).delete();
      returns:
        - void
    python:
      <<: *method-delete
      method: rule.as_remote(tx).delete();
      returns:
        - None

  - method:
    common: &method-isDeleted
      title: Check if the rule has been deleted
      returns:
        - boolean
    java:
      <<: *method-isDeleted
      method: rule.asRemote(Transaction tx).isDeleted();
    javascript:
      <<: *method-isDeleted
      method: await rule.asRemote(tx).isDeleted();
    python:
      <<: *method-isDeleted
      method: rule.as_remote(tx).is_deleted()
