methods:
  - method:
    common: &method-asRemote
      title: Get a Remote version of the type.
      description: The remote version uses the given transaction to execute every method call.
      accepts:
        param:
          name: tx
          description: The transaction to be used to make method calls.
          type: Transaction
          required: true
          default: N/A
      returns:
        - "`RemoteType`"
    java:
      <<: *method-asRemote
      method: type.asRemote(tx);
      returns:
        - "`Type.Remote`"
    javascript:
      <<: *method-asRemote
      method: type.asRemote(tx);
    python:
      <<: *method-asRemote
      method: type.as_remote(tx)

  - method:
    common: &method-getLabel
      title: Retrieve label (Local)
      description: Retrieves the unique label of the type.
      returns:
        - String
    java:
      <<: *method-getLabel
      method: type.getLabel().name();
    javascript:
      <<: *method-getLabel
      method: type.label.name;
    python:
      <<: *method-getLabel
      method: type.get_label().name()

  - method:
    common: &method-isRoot
      title: Check if type is a root type (Local)
      description: Checks if the type is a root type.
      returns:
        - boolean
    java:
      <<: *method-isRoot
      method: type.isRoot();
    javascript:
      <<: *method-isRoot
      method: type.root;
    python:
      <<: *method-isRoot
      method: type.is_root()

  - method:
    common: &method-setLabel
      title: Rename label
      description: Renames the label of the type. The new label must remain unqiue.
      accepts:
        param:
          name: label
          description: The new label to be given to the type.
          type: String
          required: true
          default: N/A
    java:
      <<: *method-setLabel
      method: type.asRemote(Transaction tx).setLabel(String label);
      returns:
        - void
    javascript:
      <<: *method-setLabel
      method: await type.asRemote(tx).setLabel(label);
      returns:
        - void
    python:
      <<: *method-setLabel
      method: type.as_remote(tx).set_label(label)
      returns:
        - None

  - method:
    common: &method-isAbstract
      title: Check if type is abstract
      description: Checks if the type is prevented from having data instances (i.e. `abstract`).
      returns:
        - boolean
    java:
      <<: *method-isAbstract
      method: type.asRemote(Transaction tx).isAbstract();
    javascript:
      <<: *method-isAbstract
      method: await type.asRemote(tx).isAbstract();
    python:
      <<: *method-isAbstract
      method: type.as_remote(tx).is_abstract()

  - method:
    common: &method-getSupertype
      title: Retrieve direct supertype
      description: Retrieves the most immediate supertype of the type.
    java:
      <<: *method-getSupertype
      method: type.asRemote(Transaction tx).getSupertype();
      returns:
        - "[`Type`](../concept-api/type?tab=java#type-methods)"
        - "`null`"
    javascript:
      <<: *method-getSupertype
      method: await type.asRemote(tx).getSupertype();
      returns:
        - "[`Type`](../concept-api/type?tab=javascript#type-methods)"
        - "`null`"
    python:
      <<: *method-getSupertype
      method: type.as_remote(tx).get_supertype()
      returns:
        - "[`Type`](../concept-api/type?tab=python#type-methods)"
        - None

  - method:
    common: &method-getSupertypes
      title: Retrieve all supertypes
      description: Retrieves all supertypes of the type.
    java:
      <<: *method-getSupertypes
      method: type.asRemote(Transaction tx).getSupertypes();
      returns:
        - Stream<[`Type`](../concept-api/type?tab=java#type-methods)>
    javascript:
      <<: *method-getSupertypes
      method: type.asRemote(tx).getSupertypes()
      returns:
        - "[`Stream`](../client-api/nodejs#stream)<[`Type`](../concept-api/type?tab=javascript#type-methods)>"
    python:
      <<: *method-getSupertypes
      method: type.as_remote(tx).get_supertypes()
      returns:
        - Iterator of [`Type`](../concept-api/type?tab=python#type-methods)

  - method:
    common: &method-getSubtypes
      title: Retrieve all subtypes
      description: Retrieves all direct and indirect subtypes of the type.
    java:
      <<: *method-getSubtypes
      method: type.asRemote(Transaction tx).getSubtypes();
      returns:
        - Stream<[`Type`](../concept-api/type?tab=java#type-methods)>
    javascript:
      <<: *method-getSubtypes
      method: type.asRemote(tx).getSubtypes()
      returns:
        - "[`Stream`](../client-api/nodejs#stream)<[`Type`](../concept-api/type?tab=javascript#type-methods)>"
    python:
      <<: *method-getSubtypes
      method: type.as_remote(tx).get_subtypes()
      returns:
        - Iterator of [`Type`](../concept-api/type?tab=python#type-methods)
