methods:
  - method:
    common: &method-type
      title: Retrieve type (Local)
      description: Retrieves the type which this Relation belongs to.
    java:
      <<: *method-type
      method: relation.getType();
      returns:
        - "[`RelationType`](../concept-api/type?tab=java#relationtype-methods)"
    javascript:
      <<: *method-type
      method: relation.type;
      returns:
        - "[`RelationType`](../concept-api/type?tab=javascript#relationtype-methods)"
    python:
      <<: *method-type
      method: relation.get_type()
      returns:
        - "[`RelationType`](../concept-api/type?tab=python#relationtype-methods)"

  - method:
    common: &method-rolePlayersMap
      title: Retrieve role players per role
      description: Retrieves a map of all instances involved in the Relation and the role each play.
    java:
      <<: *method-rolePlayersMap
      method: relation.asRemote(Transaction tx).getPlayersByRoleType();
      returns:
        - 'Map<[`RoleType`](../concept-api/type?tab=java#roletype-methods), List<[`Thing`](../concept-api/thing?tab=java#thing-methods)>>'
    javascript:
      <<: *method-rolePlayersMap
      method: await relation.asRemote(tx).getPlayersByRoleType();
      returns:
        - 'Map<[`RoleType`](../concept-api/type?tab=javascript#roletype-methods), Array of [`Thing`](../concept-api/thing?tab=javascript#thing-methods)>'
    python:
      <<: *method-rolePlayersMap
      method: relation.as_remote(tx).get_players_by_role_type()
      returns:
        - "Dictionary of [`Role`](../concept-api/type?tab=python#roletype-methods) to List of [`Thing`](../concept-api/thing?tab=python#thing-methods)"

  - method:
    common: &method-relating
      title: Retrieve role types currently played
      description: Retrieves all role types currently played in this Relation.
    java:
      <<: *method-relating
      method: relation.asRemote(Transaction tx).getRelating();
      returns:
        - "Stream<[`RoleType`](../concept-api/type?tab=java#roletype-methods)>"
    javascript:
      <<: *method-relating
      method: relation.asRemote(tx).getRelating();
      returns:
        - "[Stream](../client-api/nodejs#stream) of [`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
    python:
      <<: *method-relating
      method: relation.as_remote(tx).get_relating()
      returns:
        - "Iterator of [`RoleType`](../concept-api/type?tab=python#roletype-methods)"

  - method:
    common: &method-rolePlayers
      title: Retrieve role players
      description: Retrieves all roleplayers of this this Relation, optionally filtered by given role types.
      accepts:
        param: &accepts-rolePlayers-role
          name: role
          description: The roles to filter the role players by.
          required: false
          default: N/A
    java:
      <<: *method-rolePlayers
      method: relation.asRemote(Transaction tx).getPlayers(RoleType... roleTypes);
      accepts:
        param:
          <<: *accepts-rolePlayers-role
          type: "[`RoleType...`](../concept-api/type?tab=java#roletype-methods)"
      returns:
        - "Stream<[`Thing`](../concept-api/thing?tab=java#thing-methods)>"
    javascript:
      <<: *method-rolePlayers
      method: relation.asRemote(tx).getPlayers(roleTypes);
      accepts:
        param:
          <<: *accepts-rolePlayers-role
          type: "Array of [`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
      returns:
        - "[Stream](../client-api/nodejs#stream) of [`Thing`](../concept-api/thing?tab=javascript)"
    python:
      <<: *method-rolePlayers
      method: relation.as_remote(tx).get_players(role_types)
      accepts:
        param:
          <<: *accepts-rolePlayers-role
          type: "List of [`RoleType`](../concept-api/type?tab=python#roletype-methods)"
      returns:
        - "Iterator of [`Thing`](../concept-api/thing?tab=python#thing-methods)"

  - method:
    common: &method-assign
      title: Add roleplayer
      description: Adds a new roleplayer to play the given role in this Relation.
      accepts: &accepts-assign
        param1: &accepts-assign-role
          name: role
          description: The role to be played by the `thing`
          required: true
          default: N/A
        param2: &accepts-assign-thing
          name: thing
          description: The thing to play the `role`
          required: true
          default: N/A
    java:
      <<: *method-assign
      method: relation.asRemote(Transaction tx).addPlayer(RoleType role, Thing thing);
      accepts:
        <<: *accepts-assign
        param1:
          <<: *accepts-assign-role
          type: "[`RoleType`](../concept-api/type?tab=java#roletype-methods)"
        param2:
          <<: *accepts-assign-thing
          type: "[`Thing`](../concept-api/thing?tab=java#thing-methods)"
      returns:
        - void
    javascript:
      <<: *method-assign
      method: await relation.asRemote(tx).addPlayer(role, thing);
      accepts:
        <<: *accepts-assign
        param1:
          <<: *accepts-assign-role
          type: "[`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
        param2:
          <<: *accepts-assign-thing
          type: "[`Thing`](../concept-api/thing?tab=javascript#thing-methods)"
      returns:
        - void
    python:
      <<: *method-assign
      method: relation.as_remote(tx).add_player(role, thing)
      accepts:
        <<: *accepts-assign
        param1:
          <<: *accepts-assign-role
          type: "[`RoleType`](../concept-api/type?tab=python#roletype-methods)"
        param2:
          <<: *accepts-assign-thing
          type: "[`Thing`](../concept-api/thing?tab=python#thing-methods)"
      returns:
        - None

  - method:
    common: &method-unassign
      title: Remove a roleplayer
      description: Removes the association of the given instance that plays the given role in this Relation.
      accepts:
        param1: &accepts-unassign-role
          name: role
          description: The role to no longer be played by the `thing` in this Relation.
          required: true
          default: N/A
        param2: &accepts-unassign-thing
          name: thing
          description: The instance to no longer play the `role` in this Relation.
          required: true
          default: N/A
    java:
      <<: *method-unassign
      method: relation.asRemote(Transaction tx).removePlayer(RoleType role, Thing thing);
      accepts:
        param1:
          <<: *accepts-unassign-role
          type: "[`RoleType`](../concept-api/type?tab=java#roletype-methods)"
        param2:
          <<: *accepts-unassign-thing
          type: "[`Thing`](../concept-api/thing?tab=java#thing-methods)"
      returns:
        - void
    javascript:
      <<: *method-unassign
      method: await relation.asRemote(tx).removePlayer(role, thing);
      accepts:
        param1:
          <<: *accepts-unassign-role
          type: "[`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
        param2:
          <<: *accepts-unassign-thing
          type: "[`Thing`](../concept-api/thing?tab=javascript#thing-methods)"
      returns:
        - void
    python:
      <<: *method-unassign
      method: relation.as_remote(tx).remove_player(role, thing)
      accepts:
        param1:
          <<: *accepts-unassign-role
          type: "[`RoleType`](../concept-api/type?tab=python#roletype-methods)"
        param2:
          <<: *accepts-unassign-thing
          type: "[`Thing`](../concept-api/thing?tab=python#thing-methods)"
      returns:
        - None
  - method:
    common: &method-asRemote
      title: Get a Remote version of the Relation.
      description: The remote version uses the given transaction to execute every method call.
      accepts:
        param:
          name: transaction
          description: The transaction to be used to make method calls.
          type: Transaction
          required: true
          default: N/A
      returns:
        - "`RemoteRelation`"
    java:
      <<: *method-asRemote
      method: relation.asRemote(Transaction tx);
      returns:
        - "`Relation.Remote`"
    javascript:
      <<: *method-asRemote
      method: relation.asRemote(tx);
    python:
      <<: *method-asRemote
      method: relation.as_remote(tx)