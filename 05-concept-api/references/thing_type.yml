methods:
  - method:
    common: &method-asRemote
      title: Get a Remote version of the ThingType.
      description: The remote version uses the given transaction to execute every method call.
      accepts:
        param:
          name: tx
          description: The transaction to be used to make method calls.
          type: Transaction
          required: true
          default: N/A
      returns:
        - "`RemoteThingType`"
    java:
      <<: *method-asRemote
      method: thingType.asRemote(tx);
      returns:
        - "`ThingType.Remote`"
    javascript:
      <<: *method-asRemote
      method: thingType.asRemote(tx);
    python:
      <<: *method-asRemote
      method: thing_type.as_remote(tx)

  - method:
    common: &method-getSupertype
      title: Retrieve direct supertype
      description: Retrieves the most immediate supertype of the ThingType.
    java:
      <<: *method-getSupertype
      method: thingType.getSupertype();
      returns:
        - "[`ThingType`](../concept-api/type?tab=java#thingtype-methods)"
        - "`null`"
    javascript:
      <<: *method-getSupertype
      method: await thingType.getSupertype();
      returns:
        - "[`ThingType`](../concept-api/type?tab=javascript#thingtype-methods)"
        - "`null`"
    python:
      <<: *method-getSupertype
      method: thing_type.get_supertype()
      returns:
        - "[`ThingType`](../concept-api/type?tab=python#thingtype-methods)"
        - None

  - method:
    common: &method-getSupertypes
      title: Retrieve all supertypes
      description: Retrieves all supertypes of the ThingType.
    java:
      <<: *method-getSupertypes
      method: thingType.getSupertypes();
      returns:
        - Stream<[`ThingType`](../concept-api/type?tab=java#thingtype-methods)>
    javascript:
      <<: *method-getSupertypes
      method: thingType.getSupertypes()
      returns:
        - "[`Stream`](../client-api/nodejs#stream)<[`ThingType`](../concept-api/type?tab=javascript#thingtype-methods)>"
    python:
      <<: *method-getSupertypes
      method: thing_type.get_supertypes()
      returns:
        - Iterator of [`ThingType`](../concept-api/type?tab=python#thingtype-methods)

  - method:
    common: &method-getSubtypes
      title: Retrieve all subtypes
      description: Retrieves all direct and indirect subtypes of the ThingType.
    java:
      <<: *method-getSubtypes
      method: thingType.getSubtypes();
      returns:
        - Stream<[`ThingType`](../concept-api/type?tab=java#thingtype-methods)>
    javascript:
      <<: *method-getSubtypes
      method: thingType.getSubtypes()
      returns:
        - "[`Stream`](../client-api/nodejs#stream) of [`ThingType`](../concept-api/type?tab=javascript#thingtype-methods)"
    python:
      <<: *method-getSubtypes
      method: thing_type.get_subtypes()
      returns:
        - Iterator of [`ThingType`](../concept-api/type?tab=python#thingtype-methods)

  - method:
    common: &method-getInstances
      title: Retrieve instances
      descriptions: Retrieve all instances of this ThingType.
    java:
      <<: *method-getInstances
      method: thingType.getInstances();
      returns:
        - Stream<[`Thing`](../concept-api/thing?tab=java#thing-methods)>
    javascript:
      <<: *method-getInstances
      method: thingType.getInstances();
      returns:
        - "[`Stream`](../client-api/nodejs#stream) of [`Thing`](../concept-api/thing?tab=javascript#thing-methods)"
    python:
      <<: *method-getInstances
      method: thing_type.get_instances()
      returns:
        - Iterator of [`Thing`](../concept-api/thing?tab=python#thing-methods)

  - method:
    common: &method-setAbstract
      title: Set abstract
      description: Set a ThingType to be abstract, meaning it cannot have instances.
    java:
      <<: *method-setAbstract
      method: thingType.setAbstract();
      returns:
        - void
    javascript:
      <<: *method-setAbstract
      method: await thingType.setAbstract();
      returns:
        - void
    python:
      <<: *method-setAbstract
      method: thing_type.set_abstract()
      returns:
        - None

  - method:
    common: &method-unsetAbstract
      title: Unset abstract
      description: Set a ThingType to be non-abstract, meaning it can have instances.
    java:
      <<: *method-unsetAbstract
      method: thingType.unsetAbstract();
      returns:
        - void
    javascript:
      <<: *method-unsetAbstract
      method: await thingType.unsetAbstract();
      returns:
        - void
    python:
      <<: *method-unsetAbstract
      method: thing_type.unset_abstract()
      returns:
        - None

  - method:
    common: &method-setPlays
      title: Add new playable role
      description: Allows the instances of this type to play the given role.
      accepts:
        param1: &accepts-setPlays-roleType
          name: roleType
          description: The role to be played by the instances of this type.
          required: true
          default: N/A
        param2: &accepts-setPlays-overriddenType
          name: overriddenType
          description: The role type that this role overrides, if applicable.
          required: false
    java:
      <<: *method-setPlays
      method: thingType.setPlays(RoleType roleType, RoleType overriddenType);
      accepts:
        param1:
          <<: *accepts-setPlays-roleType
          type: "[`RoleType`](../concept-api/type?tab=java#roletype-methods)"
        param2:
          <<: *accepts-setPlays-overriddenType
          type: "[`RoleType`](../concept-api/type?tab=java#roletype-methods)"
          default: null
      returns:
        - void
    javascript:
      <<: *method-setPlays
      method: await thingType.setPlays(roleType, overriddenType);
      accepts:
        param1:
          <<: *accepts-setPlays-roleType
          type: "[`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
        param2:
          <<: *accepts-setPlays-overriddenType
          type: "[`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
          default: undefined
      returns:
        - void
    python:
      <<: *method-setPlays
      method: thing_type.set_plays(role_type, overridden_type=None)
      accepts:
        param1:
          <<: *accepts-setPlays-roleType
          name: role_type
          type: "[`RoleType`](../concept-api/type?tab=python#roletype-methods)"
        param2:
          <<: *accepts-setPlays-overriddenType
          name: overridden_type
          type: "[`RoleType`](../concept-api/type?tab=python#roletype-methods)"
          default: None
      returns:
        - None

  - method:
    common: &method-setOwns
      title: Add attribute ownership
      description: Allows the instances of this type to own the given `AttributeType`.
      accepts:
        param1: &accepts-setOwns-attributeType
          name: attributeType
          description: The AttributeType to be owned by the instances of this type.
          required: true
          default: N/A
        param2: &accepts-setOwns-isKey
          name: isKey
          type: boolean
          description: Whether this AttributeType is to be owned as a unique key.
          required: false
          default: false
      returns:
        - void
    java:
      <<: *method-setOwns
      method: thingType.setOwns(AttributeType attributeType, boolean isKey);
      accepts:
        param1:
          <<: *accepts-setOwns-attributeType
          type: "[`AttributeType`](../concept-api/type?tab=java#attributetype-methods)"
        param2:
          <<: *accepts-setOwns-isKey
    javascript:
      <<: *method-setOwns
      method: await thingType.setOwns(attributeType, isKey);
      accepts:
        param1:
          <<: *accepts-setOwns-attributeType
          type: "[`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)"
        param2:
          <<: *accepts-setOwns-isKey

  - method:
    common: &method-setOwnsOverridden
      title: Add attribute ownership
      description: Allows the instances of this type to own the given `AttributeType`.
      accepts:
        param1: &accepts-setOwnsOverridden-attributeType
          name: attributeType
          description: The AttributeType to be owned by the instances of this type.
          required: true
          default: N/A
        param2: &accepts-setOwnsOverridden-overriddenType
          name: overriddenType
          description: The AttributeType that this attribute ownership overrides, if applicable.
          required: false
          default: null
        param3: &accepts-setOwnsOverridden-isKey
          name: isKey
          type: boolean
          description: Whether this AttributeType is to be owned as a unique key.
          required: false
          default: false
      returns:
        - void
    java:
      <<: *method-setOwnsOverridden
      method: thingType.setOwns(AttributeType attributeType, AttributeType overriddenType, boolean isKey);
      accepts:
        param1:
          <<: *accepts-setOwnsOverridden-attributeType
          type: "[`AttributeType`](../concept-api/type?tab=java#attributetype-methods)"
        param2:
          <<: *accepts-setOwnsOverridden-overriddenType
          type: "[`AttributeType`](../concept-api/type?tab=java#attributetype-methods)"
        param3:
          <<: *accepts-setOwnsOverridden-isKey
    javascript:
      <<: *method-setOwnsOverridden
      method: await thingType.setOwns(attributeType, overriddenType, isKey);
      accepts:
        param1:
          <<: *accepts-setOwnsOverridden-attributeType
          type: "[`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)"
        param2:
          <<: *accepts-setOwnsOverridden-overriddenType
          type: "[`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)"
        param3:
          <<: *accepts-setOwnsOverridden-isKey

  - method:
    python:
      title: Add attribute ownership
      description: Allows the instances of this type to own the given `AttributeType`.
      method: thing_type.set_owns(attribute_type, overridden_type=None, is_key=False);
      accepts:
        param1:
          name: attributeType
          type: "[`AttributeType`](../concept-api/type?tab=python#attributetype-methods)"
          description: The AttributeType to be owned by the instances of this type.
          required: true
          default: N/A
        param2:
          name: overriddenType
          type: "[`AttributeType`](../concept-api/type?tab=python#attributetype-methods)"
          description: The AttributeType that this attribute ownership overrides, if applicable.
          required: false
          default: None
        param3:
          name: isKey
          type: bool
          description: Whether this AttributeType is to be owned as a unique key.
          required: false
          default: False
      returns:
        - None

  - method:
    common: &method-getPlays
      title: Retrieve playable roles
      description: Retrieves all direct and inherited roles that are allowed to be played by the instances of this type.
    java:
      <<: *method-getPlays
      method: thingType.getPlays();
      returns:
        - Stream<[`RoleType`](../concept-api/type?tab=java#roletype-methods)>
    javascript:
      <<: *method-getPlays
      method: await thingType.getPlays();
      returns:
        - "[`Stream`](../client-api/nodejs#stream) of [`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
    python:
      <<: *method-getPlays
      method: thing_type.get_plays()
      returns:
        - Iterator of [`RoleType`](../concept-api/type?tab=python#roletype-methods)

  - method:
    common: &method-getOwns
      title: Retrieve attributes
      description: Retrieves attribute types that the instances of this type are allowed to own.
      accepts:
        param:
          name: keysOnly
          type: boolean
          description: If set to `true`, then only attribute types owned as keys will be retrieved.
          required: false
          default: false
    java:
      <<: *method-getOwns
      method: thingType.getOwns(boolean keysOnly);
      returns:
        - Stream<[`AttributeType`](../concept-api/type?tab=java#attributetype-methods)>
    javascript:
      <<: *method-getOwns
      method: await thingType.getOwns(keysOnly);
      returns:
        - "[`Stream`](../client-api/nodejs#stream) of [`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)"

  - method:
    common: &method-getOwnsForValueType
      title: Retrieve attributes
      description: Retrieves attribute types that the instances of this type are allowed to own.
      accepts:
        param1: &accepts-getOwnsForValueType-valueType
          name: valueType
          type: "`AttributeType.ValueType`"
          description: If specified, only attribute types of this ValueType will be retrieved.
          required: false
          default: null
        param2: &accepts-getOwnsForValueType-keysOnly
          name: keysOnly
          type: boolean
          description: If set to `true`, then only attribute types owned as keys will be retrieved.
          required: false
          default: false
    java:
      <<: *method-getOwnsForValueType
      method: thingType.getOwns(AttributeType.ValueType valueType, boolean keysOnly);
      accepts:
        param1:
          <<: *accepts-getOwnsForValueType-valueType
        param2:
          <<: *accepts-getOwnsForValueType-keysOnly
      returns:
        - Stream<[`AttributeType`](../concept-api/type?tab=java#attributetype-methods)>
    javascript:
      <<: *method-getOwnsForValueType
      method: await thingType.getOwns(valueType, keysOnly);
      accepts:
        param1:
          <<: *accepts-getOwnsForValueType-valueType
        param2:
          <<: *accepts-getOwnsForValueType-keysOnly
      returns:
        - "[`Stream`](../client-api/nodejs#stream) of [`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)"

  - method:
    python:
      title: Retrieve attributes
      description: Retrieves attribute types that the instances of this type are allowed to own.
      method: thing_type.get_owns(value_type=None, keys_only=False)
      accepts:
        param1:
          name: value_type
          type: "`ValueType`"
          description: If specified, only attribute types of this ValueType will be retrieved.
          required: false
          default: None
        param2:
          name: keys_only
          type: bool
          description: If set to `True`, then only attribute types owned as keys will be retrieved.
          required: false
          default: False
      returns:
        - Iterator of [`AttributeType`](../concept-api/type?tab=python#attributetype-methods)

  - method:
    common: &method-unsetPlays
      title: Remove role
      description: Disallows the instances of this type from playing the given role.
      accepts:
        param: &accepts-unsetPlays
          name: role
          description: The role to not be played by the instances of this type.
          required: true
          default: N/A
    java:
      <<: *method-unsetPlays
      method: thingType.unsetPlays(RoleType role);
      accepts:
        param:
          <<: *accepts-unsetPlays
          type: "[`RoleType`](../concept-api/type?tab=java#roletype-methods)"
      returns:
        - void
    javascript:
      <<: *method-unsetPlays
      method: await thingType.unsetPlays(role);
      accepts:
        param:
          <<: *accepts-unsetPlays
          type: "[`RoleType`](../concept-api/type?tab=javascript#roletype-methods)"
      returns:
        - void
    python:
      <<: *method-unsetPlays
      method: thing_type.unset_plays(role)
      accepts:
        param:
          <<: *accepts-unsetPlays
          type: "[`RoleType`](../concept-api/type?tab=python#roletype-methods)"
      returns:
        - None

  - method:
    common: &method-unsetOwns
      title: Remove attribute
      description: Disallows the instances of this type from owning the given `AttributeType`.
      accepts:
        param: &accepts-unsetOwns-attributeType
          name: attributeType
          description: The AttributeType to not be owend by the type.
          required: true
          default: N/A
    java:
      <<: *method-unsetOwns
      method: thingType.unsetOwns(AttributeType attributeType);
      accepts:
        param:
          <<: *accepts-unsetOwns-attributeType
          type: "[`AttributeType`](../concept-api/type?tab=java#attributetype-methods)"
      returns:
        - void
    javascript:
      <<: *method-unsetOwns
      method: await thingType.unsetOwns(attributeType);
      accepts:
        param:
          <<: *accepts-unsetOwns-attributeType
          type: "[`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)"
      returns:
        - void
    python:
      <<: *method-unsetOwns
      method: thing_type.unset_owns(attribute_type)
      accepts:
        param:
          <<: *accepts-unsetOwns-attributeType
          name: attribute_type
          type: "[`AttributeType`](../concept-api/type?tab=python#attributetype-methods)"
      returns:
        - None
