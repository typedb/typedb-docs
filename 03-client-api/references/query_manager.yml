
title: "QueryManager"
methods:
  - method:
    common: &method-match
      title: Execute a TypeQL Match query
      description: Performs a TypeQL Match query in the transaction.
      accepts: &accepts-match
        param1: &accepts-match-query
          name: query
          description: The TypeQL Match query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-match
      method: transaction.query().match(TypeQLMatch query, TypeDBOptions options);
      accepts:
        <<: *accepts-match
        param1:
          <<: *accepts-match-query
          type: "`TypeQLMatch`"
      returns:
        - "Stream<[ConceptMap](#conceptmap)>"
    javascript:
      <<: *method-match
      method: transaction.query.match(query, options);
      accepts:
        <<: *accepts-match
        param1:
          <<: *accepts-match-query
          type: string
      returns:
        - "[Stream](#stream) of [ConceptMap](#conceptmap)"
    python:
      <<: *method-match
      method: transaction.query().match(query, options)
      accepts:
        <<: *accepts-match
        param1:
          <<: *accepts-match-query
          type: string
      returns:
        - Iterator of [ConceptMap](#conceptmap)

  - method:
    common: &method-matchAggregate
      title: Execute a TypeQL Match Aggregate query
      description: Performs a TypeQL Match Aggregate query in the transaction.
      accepts: &accepts-matchAggregate
        param1: &accepts-matchAggregate-query
          name: query
          description: The TypeQL Match Aggregate query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-matchAggregate
      method: transaction.query().match(TypeQLMatch.Aggregate query, TypeDBOptions options);
      accepts:
        <<: *accepts-matchAggregate
        param1:
          <<: *accepts-matchAggregate-query
          type: "`TypeQLMatch.Aggregate`"
      returns:
        - "[QueryFuture](#queryfuture)<[Numeric](#numeric)>"
    javascript:
      <<: *method-matchAggregate
      method: await transaction.query.matchAggregate(query, options);
      accepts:
        <<: *accepts-matchAggregate
        param1:
          <<: *accepts-matchAggregate-query
          type: string
      returns:
        - "[QueryFuture](#queryfuture) of [Numeric](#numeric)"
    python:
      <<: *method-matchAggregate
      method: transaction.query().match_aggregate(query, options)
      accepts:
        <<: *accepts-matchAggregate
        param1:
          <<: *accepts-matchAggregate-query
          type: string
      returns:
        - "[QueryFuture](#queryfuture) of [Numeric](#numeric)"

  - method:
    common: &method-matchGroup
      title: Execute a TypeQL Match Group query
      description: Performs a TypeQL Match Group query in the transaction.
      accepts: &accepts-matchGroup
        param1: &accepts-matchGroup-query
          name: query
          description: The TypeQL Match Group query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-matchGroup
      method: transaction.query().match(TypeQLMatch.Group query, TypeDBOptions options);
      accepts:
        <<: *accepts-matchGroup
        param1:
          <<: *accepts-matchGroup-query
          type: "`TypeQLMatch.Group`"
      returns:
        - "Stream<[ConceptMapGroup](#conceptmapgroup)>"
    javascript:
      <<: *method-matchGroup
      method: transaction.query.matchGroup(query, options);
      accepts:
        <<: *accepts-matchGroup
        param1:
          <<: *accepts-matchGroup-query
          type: string
      returns:
        - "[Stream](#stream)<[ConceptMapGroup](#conceptmapgroup)>"
    python:
      <<: *method-matchGroup
      method: transaction.query().match_group(query, options)
      accepts:
        <<: *accepts-matchGroup
        param1:
          <<: *accepts-matchGroup-query
          type: string
      returns:
        - Iterator of [ConceptMapGroup](#conceptmapgroup)

  - method:
    common: &method-matchGroupAggregate
      title: Execute a TypeQL Match Group Aggregate query
      description: Performs a TypeQL Match Group Aggregate query in the transaction.
      accepts: &accepts-matchGroupAggregate
        param1: &accepts-matchGroupAggregate-query
          name: query
          description: The TypeQL Match Group Aggregate query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-matchGroupAggregate
      method: transaction.query().match(TypeQLMatch.Group.Aggregate query, TypeDBOptions options);
      accepts:
        <<: *accepts-matchGroupAggregate
        param1:
          <<: *accepts-matchGroupAggregate-query
          type: "`TypeQLMatch.Group.Aggregate`"
      returns:
        - "Stream<[NumericGroup](#numericgroup)>"
    javascript:
      <<: *method-matchGroupAggregate
      method: transaction.query.matchGroupAggregate(query, options);
      accepts:
        <<: *accepts-matchGroupAggregate
        param1:
          <<: *accepts-matchGroupAggregate-query
          type: string
      returns:
        - "[Stream](#stream)<[NumericGroup](#numericgroup)>"
    python:
      <<: *method-matchGroupAggregate
      method: transaction.query().match_group_aggregate(query, options)
      accepts:
        <<: *accepts-matchGroupAggregate
        param1:
          <<: *accepts-matchGroupAggregate-query
          type: string
      returns:
        - Iterator of [NumericGroup](#numericgroup)

  - method:
    common: &method-insert
      title: Execute a TypeQL Insert query
      description: Performs a TypeQL Insert query in the transaction.
      accepts: &accepts-insert
        param1: &accepts-insert-query
          name: query
          description: The TypeQL Insert query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-insert
      method: transaction.query().insert(TypeQLInsert query, TypeDBOptions options);
      accepts:
        <<: *accepts-insert
        param1:
          <<: *accepts-insert-query
          type: "`TypeQLInsert`"
      returns:
        - "Stream<[ConceptMap](#conceptmap)>"
    javascript:
      <<: *method-insert
      method: transaction.query.insert(query, options);
      accepts:
        <<: *accepts-insert
        param1:
          <<: *accepts-insert-query
          type: string
      returns:
        - "[Stream](#stream)<[ConceptMap](#conceptmap)>"
    python:
      <<: *method-insert
      method: transaction.query().insert(query, options)
      accepts:
        <<: *accepts-insert
        param1:
          <<: *accepts-insert-query
          type: string
      returns:
        - Iterator of [ConceptMap](#conceptmap)

  - method:
    common: &method-delete
      title: Execute a TypeQL Delete query
      description: Performs a TypeQL Delete query in the transaction.
      accepts: &accepts-delete
        param1: &accepts-delete-query
          name: query
          description: The TypeQL Delete query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-delete
      method: transaction.query().delete(TypeQLDelete query, TypeDBOptions options);
      accepts:
        <<: *accepts-delete
        param1:
          <<: *accepts-delete-query
          type: "`TypeQLDelete`"
      returns:
        - "[`QueryFuture`](#queryfuture)"
    javascript:
      <<: *method-delete
      method: await transaction.query.delete(query, options);
      accepts:
        <<: *accepts-delete
        param1:
          <<: *accepts-delete-query
          type: string
      returns:
        - "[`QueryFuture`](#queryfuture)"
    python:
      <<: *method-delete
      method: transaction.query().delete(query, options)
      accepts:
        <<: *accepts-delete
        param1:
          <<: *accepts-delete-query
          type: string
      returns:
        - "[`QueryFuture`](#queryfuture)"

  - method:
    common: &method-update
      title: Execute a TypeQL Update query
      description: Performs a TypeQL Update query in the transaction.
      accepts: &accepts-update
        param1: &accepts-update-query
          name: query
          description: The TypeQL Update query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-update
      method: transaction.query().update(TypeQLUpdate query, TypeDBOptions options);
      accepts:
        <<: *accepts-update
        param1:
          <<: *accepts-update-query
          type: "`TypeQLUpdate`"
      returns:
        - "Stream<[ConceptMap](#conceptmap)>"
    javascript:
      <<: *method-update
      method: transaction.query.update(query, options);
      accepts:
        <<: *accepts-update
        param1:
          <<: *accepts-update-query
          type: string
      returns:
        - "[Stream](#stream)<[ConceptMap](#conceptmap)>"
    python:
      <<: *method-update
      method: transaction.query().update(query, options)
      accepts:
        <<: *accepts-update
        param1:
          <<: *accepts-update-query
          type: string
      returns:
        - Iterator of [ConceptMap](#conceptmap)

  - method:
    common: &method-explain
      title: Execute a TypeQL Explain query
      description: Performs a TypeQL Explain query in the transaction.
      accepts:
        param1:
          name: explainable
          type: "[`ConceptMap.Explainable`](#explainable)"
          description: The Explainable to be explained.
          required: true
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-explain
      method: transaction.query().explain(ConceptMap.Explainable explainable, TypeDBOptions options);
      returns:
        - "Stream<[Explanation](#explanation)>"
    javascript:
      <<: *method-explain
      method: transaction.query.explain(explainable, options);
      returns:
        - "[Stream](#stream) of [Explanation](#explanation)"
    python:
      <<: *method-explain
      method: transaction.query().explain(explainable, options)
      returns:
        - Iterator of [Explanation](#explanation)

  - method:
    common: &method-define
      title: Execute a TypeQL Define query
      description: Performs a TypeQL Define query in the transaction.
      accepts: &accepts-define
        param1: &accepts-define-query
          name: query
          description: The TypeQL Define query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-define
      method: transaction.query().define(TypeQLDefine query, TypeDBOptions options);
      accepts:
        <<: *accepts-define
        param1:
          <<: *accepts-define-query
          type: "`TypeQLDefine`"
      returns:
        - "[`QueryFuture`](#queryfuture)"
    javascript:
      <<: *method-define
      method: await transaction.query.define(query, options);
      accepts:
        <<: *accepts-define
        param1:
          <<: *accepts-define-query
          type: string
      returns:
        - "[`QueryFuture`](#queryfuture)"
    python:
      <<: *method-define
      method: transaction.query().define(query, options)
      accepts:
        <<: *accepts-define
        param1:
          <<: *accepts-define-query
          type: string
      returns:
        - "[`QueryFuture`](#queryfuture)"

  - method:
    common: &method-undefine
      title: Execute a TypeQL Undefine query
      description: Performs a TypeQL Undefine query in the transaction.
      accepts: &accepts-undefine
        param1: &accepts-undefine-query
          name: query
          description: The TypeQL Undefine query to be executed.
          required: true
          default: N/A
        param2:
          name: options
          type: "[`TypeDBOptions`](#options)"
          description: Specify query options
          required: false
          default: default TypeDBOptions - uses server defaults
    java:
      <<: *method-undefine
      method: transaction.query().undefine(TypeQLUndefine query, TypeDBOptions options);
      accepts:
        <<: *accepts-undefine
        param1:
          <<: *accepts-undefine-query
          type: "`TypeQLUndefine`"
      returns:
        - "[`QueryFuture`](#queryfuture)"
    javascript:
      <<: *method-undefine
      method: await transaction.query.undefine(query, options);
      accepts:
        <<: *accepts-undefine
        param1:
          <<: *accepts-undefine-query
          type: string
      returns:
        - "[`QueryFuture`](#queryfuture)"
    python:
      <<: *method-undefine
      method: transaction.query().undefine(query, options)
      accepts:
        <<: *accepts-undefine
        param1:
          <<: *accepts-undefine-query
          type: string
      returns:
        - "[`QueryFuture`](#queryfuture)"
